apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: "$(workspaces.source.path)"
      workingDir: "$(workspaces.source.path)"
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_SOURCE_PATH}" because ${WORKSPACE_SOURCE_PATH} might be "/"
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8
spec:
  description: Run linting with flake8
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: "$(workspaces.source.path)"
      script: |
        #!/bin/bash
        set -e
        python3 -m pip install --upgrade pip wheel flake8
        flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: "$(workspaces.source.path)"
      script: |
        #!/bin/bash
        set -e
        python3 -m pip install --upgrade pip wheel
        pip3 install -r requirements.txt
        nosetests "$(params.args)"

--- 
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  description: Build a container image using Buildah
  params:
    - name: image-name
      description: Name for the resulting image
      type: string
    - name: context-dir
      description: Directory containing the build context (Dockerfile and application code)
      type: string
  steps:
    - name: build-image
      image: quay.io/buildah/stable:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        buildah bud -t $(params.image-name) .


---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
spec:
  params:
    - name: app-name
      description: Name of the application
      type: string
    - name: build-image
      description: Image to deploy
      type: string
  steps:
    - name: deploy
      image: quay.io/openshift/origin-cli:latest
      command:
        - /bin/bash
      args:
        - -c
        - |
          oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -

